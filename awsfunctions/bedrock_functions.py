from awsfunctions.aws_functions import get_aws_client
from dotenv import load_dotenv
import os
import boto3
import json



def query_llm(prompt):
    """Query a language model through AWS Bedrock.
    
    This function sends a prompt to the language model specified in the
    environment variable LLM_MODEL_ID and returns the generated completion.
    
    Args:
        prompt (str): The text prompt to send to the language model
        
    Returns:
        str: The completion text generated by the language model,
             or "No response generated." if no completion is returned
    """
    client = get_aws_client("bedrock-runtime")  
    model_id = os.getenv("LLM_MODEL_ID")

    response = client.invoke_model(
        modelId=model_id,
        body=json.dumps({"prompt": prompt, "max_tokens_to_sample": 10000})  
    )

    response_body = json.loads(response["body"].read().decode("utf-8"))
    return response_body.get("completion", "No response generated.")

def load_aws_credentials():
    """Load AWS credentials from environment variables.
    
    Returns:
        tuple: AWS access key, secret, and region
    """
    load_dotenv()
    aws_access_key = os.getenv("AWS_ACCES_KEY")
    aws_secret = os.getenv("AWS_SECRET")
    aws_region = os.getenv("AWS_REGION")
    return aws_access_key, aws_secret, aws_region

def create_bedrock_client(aws_access_key, aws_secret, aws_region):
    """Create an AWS Bedrock client using the provided credentials.
    
    Args:
        aws_access_key (str): AWS access key
        aws_secret (str): AWS secret key
        aws_region (str): AWS region
        
    Returns:
        boto3.client: Configured Bedrock runtime client
    """
    return boto3.client(
        service_name='bedrock-runtime',
        region_name=aws_region,
        aws_access_key_id=aws_access_key,
        aws_secret_access_key=aws_secret
    )

def generate_embedding(bedrock_client, input_string):
    """Generate a vector embedding for the input string using Amazon Titan model.
    
    Args:
        bedrock_client (boto3.client): Bedrock runtime client
        input_string (str): Text to generate embedding for
        
    Returns:
        list: Vector embedding for the input text
    """
    response = bedrock_client.invoke_model(
        modelId='amazon.titan-embed-text-v1',
        contentType='application/json',
        accept='application/json',
        body=json.dumps({
            'inputText': input_string
        })
    )
    
    response_body = json.loads(response['body'].read())
    return response_body['embedding']

def get_embedding(input_string):
    """Get a vector embedding for the input string.
    
    Args:
        input_string (str): Text to generate embedding for
        
    Returns:
        list: Vector embedding for the input text
    """
    aws_access_key, aws_secret, aws_region = load_aws_credentials()
    bedrock_client = create_bedrock_client(aws_access_key, aws_secret, aws_region)
    return generate_embedding(bedrock_client, input_string)